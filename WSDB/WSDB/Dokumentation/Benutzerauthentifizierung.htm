<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Dokumentation Widerspruchsdatebank - Benutzerauthentifizierung</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<style type="text/css">
body 
{
font-family: Verdana, Arial, Helvetica, sans-serif;
font-size: 12px;
leftmargin="0" 
rightmargin="0" 
topmargin="0" 
bottommargin="0" 
marginwidth="0" 
marginheight="0"
}

p {margin: 10px 5px;}
p.code
{
font-family: Courier New, Courier, mono;
font-size: 16px;
background-color: #FFFFE6;
border:1px grey;
border-style:dashed; 
padding:10px;
margin: 10px 20px;
}

p.quellen	{font-family: Geneva, Arial, Helvetica, sans-serif;font-size: 10px;}
fieldset 	{Border: 1px solid #CCCCCC;}
legend 		{Font-Weight: bold;Border: 1px solid #CCCCCC;Text-Align: center;}
</style>

</head>

<body>
<div align="center"><h4>Benutzerauthentifizierung in der Widerspruchsdatenbank</h4></div>
<p>Idealerweise sollten Benutzerinformationen nichtredundant in einem LDAP Verzeichnis
  gespeichert sein, f&uuml;r die Region Hannover w&auml;re dies das Active Directory der
  Windows Dom&auml;ne. Leider gibt es zum Zeitpunkt der Erstellung dieser Dokumentation
  noch Probleme mit der Authentifizierung gegen das Active Directory, so dass
  auf die 'container managed security' (cms) des Tomcat Servers zur&uuml;ckgegriffen
  wird.</p>
<p>Tomcat liefert die cms in verschiedenen Auspr&auml;gungen, ich habe mich entschieden,
  die Benutzerauthentifizierung gegen eine JDBC Datenquelle durchzuf&uuml;hren, die
  gleiche Datenbank, in der auch alle anderen Informationen der Widerspruchsdatenbank
  abgelegt sind. Es wird also ein JDBC-Realm eingesetzt, der daf&uuml;r sorgt, dass
  sich jeder authentifizieren muss, der auf eine bestimmte Resource der Applikation
  zugreifen will.</p>
<fieldset>
<legend>Konfiguration des JDBC-Realms:</legend>
<p>Im Engine Kontext der <strong>Server.xml</strong> des Tomcat kommt folgendes RealmTag hinzu:</p>
<p class="code"> &lt;Realm className=&quot;org.apache.catalina.realm.JDBCRealm&quot; debug=&quot;99&quot;<br />
driverName=&quot;com.inet.tds.TdsDriver&quot;<br />
connectionURL=&quot;jdbc:inetdae:10.33.8.151:1433?database=WSDB&quot;<br />
connectionName=&quot;*****&quot; connectionPassword=&quot;*****&quot;<br />
userTable=&quot;users&quot; userNameCol=&quot;user_name&quot; userCredCol=&quot;user_pass&quot;<br />
userRoleTable=&quot;user_roles&quot; roleNameCol=&quot;role_name&quot; /&gt;</p>
<p>Zu den Attributen ist folgendes zu sagen:</p>
<ul>
<li>debug - gibt den Detailgrad der Konsolenmeldungen aus. Sollte in Produktion auf '0' stehen.</li>
<li>driverName - der JDBC Treibername. Der von mir bevorzugt benutzte Microsoft
  Treiber funktionierte bei den cms Tests leider nicht, warum kann ich nicht
  sagen. Der TDS Treiber l&auml;uft aber, daher habe ich es dabei belassen.</li>
<li>connectionURL - der vom Treiber erwartete Verbindungsstring zur Datenbank
  incl. Datenbankname. Die hier angegebene IP ist nat&uuml;rlich ung&uuml;ltig, da sie
  auf mein Notebook verweist.</li>
<li>userTable, userNameCol etc. - Diese Felder m&uuml;ssen mit den Feldern in der
  Datenbank &uuml;bereinstimmen. Eine genaue Beschreibung dieses Mechanismus w&uuml;rde
  den Rahmen sprengen, wir haben jedoch Literatur dar&uuml;ber [1,2], wer will, kann
  also nachlesen.</li>
</ul>
<p>Das &lt;Realm&gt; Tag kann sowohl im  Element &lt;Engine&gt; als auch in den
  Elementen &lt;Host&gt; und &lt;Context&gt; vorkommen.  Ist das Realm als direktes
  Unterelement der Engine deklariert, so bezieht es sich  auf alle virtuellen
  Hosts der Engine und alle damit verbundenen Kontexte. Findet  die Deklaration
  dagegen innerhalb eines &lt;Host&gt; Elements statt, wird das
  Realm  lediglich vom virtuellen Host selbst genutzt. Die st&auml;rkste Einschr&auml;nkung
  ergibt  sich bei einer Deklaration innerhalb eines Kontext-Elements, da in
diesem Fall nur der umgebende Kontext das Realm benutzt.</p>
<p>In der <strong>Web.xml</strong> der Applikation wird ein &lt;security-constraint&gt; Element
  definiert, welches festlegt, welche Resourcen innerhalb des Kontext gesch&uuml;tzt
  sein sollen:</p>
<p class="code"> &lt;security-constraint&gt;<br />
&lt;web-resource-collection&gt;<br />
&lt;web-resource-name&gt;Widerspruchsdatenbank&lt;/web-resource-name&gt;<br />
&lt;url-pattern&gt;/pages/*&lt;/url-pattern&gt;<br />
&lt;http-method&gt;DELETE&lt;/http-method&gt;<br />
&lt;http-method&gt;GET&lt;/http-method&gt;<br />
&lt;http-method&gt;POST&lt;/http-method&gt;<br />
&lt;http-method&gt;PUT&lt;/http-method&gt;<br />
&lt;/web-resource-collection&gt;<br />
&lt;auth-constraint&gt;<br />
&lt;role-name&gt;NSHUser&lt;/role-name&gt;<br />
&lt;role-name&gt;NSHAdmin&lt;/role-name&gt; <br />
&lt;/auth-constraint&gt;<br />
&lt;/security-constraint&gt;</p>
<p>Hier wird also definiert, dass bei allen Anfragen auf das Verzeichnis /pages
  die Authorisierung des Users gepr&uuml;ft werden soll.</p>
<p>Als weiteres Element wird ein &lt;login-config&gt; Tag eingef&uuml;gt:</p>
<p class="code"> &lt;login-config&gt;<br />
&lt;auth-method&gt;FORM&lt;/auth-method&gt;<br />
&lt;form-login-config&gt;<br />
&lt;form-login-page&gt;/pages/Login.jsp&lt;/form-login-page&gt;<br />
&lt;form-error-page&gt;/pages/LoginError.jsp&lt;/form-error-page&gt;<br />
&lt;/form-login-config&gt;<br />
&lt;/login-config&gt;</p>
<p>Durch dieses Tag holt sich der Server seine Informationen, was zu tun ist,
  wenn die Anfrage NICHT authorisiert ist. Hier wird eine formularbasierte Authorisierung
  definiert, welche im Zweifelsfall die Login.jsp aus dem Verzeichnis aufruft.
  Man kann auch eine Fehlerseite angeben, ich konnte aber bisher noch keinen
  Tomcat dazu bewegen, diese auch zu benutzen.</p>
<p>Schlussendlich folgen noch &lt;security-role&gt; Tags, deren Funktion mir
  ebenfalls verborgen sind. Ich habe sie nur eingetragen, weil der Server sonst
  Warnungen ins LogFile schreibt.</p>
<p class="code"> &lt;security-role&gt;<br />
&lt;description&gt;Admin, darf Benutzer anlegen&lt;/description&gt;<br />
&lt;role-name&gt;NSHAdmin&lt;/role-name&gt;<br />
&lt;/security-role&gt; </p>
</fieldset>
</body>
<p class="quellen">
&copy;&nbsp;22.10.2003 Frank Schaare für Hannoversche Informationstechnologien <br/><br/>
Quellen:<br/>
[1] Roßbach: Java Servlets und JSP mit Tomcat 4x <br/>
[2] Roßbach: Javamagazin 11.03 - Tomc@t, die Kolumne<br/>
</p>
</html>
